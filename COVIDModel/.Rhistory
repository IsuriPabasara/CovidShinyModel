curr_day_row = sir_df_temp[sir_df_temp$hosp_change > 0,]
curr_day_row = curr_day_row[curr_day_row$diff_proj == min(curr_day_row$diff_proj),]
curr_day = as.integer(curr_day_row$day)
infection_estimate = as.integer(curr_day_row$I)
susceptible_estimate = as.integer(curr_day_row$S)
recovered_estimate = as.integer(curr_day_row$R)
}
curr_day
infection_estimate
susceptible_estimate
recovered_estimate
sir_df_temp$day_shift = sir_df_temp$day - curr_day
new.num.days = num.days + curr_day
beta.int.vector = c(rep(beta, curr_day + int.day), rep(beta*int.effect, new.num.days - curr_day - int.day))
sir_df_temp = SIR(S0 - i, i, 0, beta.int.vector, gamma, new.num.days)
sir_df_temp$day_shift = sir_df_temp$day - curr_day
# sir_df_temp
ggplot(sir_df_temp[sir_df_temp$day_shift > 0,], aes(x = day_shift, y = vent)) + geom_point() + geom_line()
shiny::runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
View(sir_df_temp)
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp_change)
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp_change > 0,]
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day
infection.estimate = infection.estimate,
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp_change)
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp_change > 0,]
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp_change)
print(length(hosp.change))
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp_change > 0,]
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
print(length(hosp.numbers))
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp_change)
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp_change > 0,]
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp.change)
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp_change > 0,]
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp.change)
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp_change > 0,]
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
S0
beta.vector
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
S0
gamma
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
S0
num.days
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
S0
hospitalized
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp.change)
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp_change > 0,]
print(curr.day.df)
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp.change)
SIR.df$hosp.change = hosp.change
print(SIR.df)
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp_change > 0,]
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp.change)
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp_change > 0,]
print(curr.day.df)
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp.change)
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp.change > 0,]
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates = function(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3){
SIR.df = SIR(S0 - start.inf, start.inf, 0, beta.vector, gamma, num.days)
# find the difference between hospitalized column and the number
# currently hospitalized for COVID
SIR.df$diff_proj = abs(SIR.df$hosp - hospitalized)
# hacky
# the # hospitalized will be achieved twice according to model
# first as the hospitalizations go up, and second as the hospitalizations go down
# we want to find the day
hosp.numbers = SIR.df$hosp
hosp.change = hosp.numbers[2:length(hosp.numbers)] - hosp.numbers[1:length(hosp.numbers) - 1]
hosp.change = c(0, hosp.change)
SIR.df$hosp.change = hosp.change
# only looks at when hospitalizations go up
curr.day.df = SIR.df[SIR.df$hosp.change > 0,]
# finds the minimum difference between projected and current hospitalizations
curr.day.df = curr.day.df[curr.day.df$diff_proj == min(curr.day.df$diff_proj),]
curr.day = as.integer(curr.day.df$day)
infection.estimate = as.integer(curr.day.df$I)
susceptible.estimate = as.integer(curr.day.df$S)
recovered.estimate = as.integer(curr.day.df$R)
curr.day.list = list(
curr.day = curr.day,
infection.estimate = infection.estimate,
susceptible.estimate = susceptible.estimate,
recovered.estimate = recovered.estimate
)
return(curr.day.list)
}
find.curr.estimates(S0, beta.vector, gamma, num.days, hospitalized, start.inf = 3)
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
ggplot(sir_df_temp, aes(x = day_shift, y = vent)) + geom_point() + geom_line()
ggplot(sir_df_temp, aes(x = day_shift, y = vent)) + geom_point() + geom_line()
## Load deSolve package
library(deSolve)
library(reshape2)
## Create an SIR function
sir <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I
dI <-  beta * S * I - gamma * I
dR <- gamma * I
return(list(c(dS, dI, dR)))
})
}
### Set parameters
## Proportion in each compartment: Susceptible 0.999999, Infected 0.000001, Recovered 0
init       <- c(S = 1000, I = 80, R = 0)
## beta: infection parameter; gamma: recovery parameter
parameters <- c(beta = ((2^(1/6) - 1) + 1/14) /1000, gamma = 1/14)
## Time frame
times      <- seq(1, 3, by = 1)
## Solve using ode (General Solver for Ordinary Differential Equations)
out <- ode(y = init, times = times, func = sir, parms = parameters)
## change to data frame
out <- as.data.frame(out)
## Delete time variable
## Show data
head(out, 20)
df_temp = sir_df_temp[,c('day', 'hosp', 'icu', 'vent')]
df_melt = melt(df_temp, 'day')
ggplot(sir_df_temp, aes(x = day_shift, y = vent)) + geom_point() + geom_line()
df_temp = sir_df_temp[,c('day', 'hosp', 'icu', 'vent')]
df_melt = melt(df_temp, 'day')
df_melt
ggplot(sir_df_temp, aes(x = day_shift, y = vent)) + geom_point() + geom_line()
df_temp = sir_df_temp[,c('day', 'hosp', 'icu', 'vent')]
df_melt = melt(df_temp, 'day')
df_melt
ggplot(sir_df_temp, aes(x = day_shift, y = value, col = variable)) + geom_point() + geom_line()
df_temp = sir_df_temp[,c('day', 'hosp', 'icu', 'vent')]
df_melt = melt(df_temp, 'day')
df_melt
ggplot(df_melt, aes(x = day_shift, y = value, col = variable)) + geom_point() + geom_line()
df_temp = sir_df_temp[,c('day_shift', 'hosp', 'icu', 'vent')]
df_melt = melt(df_temp, 'day_shift')
df_melt
ggplot(df_melt, aes(x = day_shift, y = value, col = variable)) + geom_point() + geom_line()
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
runApp('C:/Users/jpeng3/Desktop/COVIDModel')
shiny::runApp()
beta
beta
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
